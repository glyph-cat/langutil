const{Component,createElement,useState,useEffect}=require('react'),{localize,isAuto,getCurrentLanguage,_INTERNALS:{addListener,removeListener}}=require('langutil'),G=()=>({auto:isAuto(),lang:getCurrentLanguage()});function useLang(){if(typeof useState!=='function'){throw ReferenceError()}const [a,b]=useState({c:null});const {c}=a;useEffect(()=>{let d=addListener(()=>{b({c})});b({c:d});return()=>{removeListener(d)}},[c===null]);return G()}function withLang(W){const d=getDisplayName(W);class L extends Component{componentDidMount(){this.r=addListener(this.forceUpdate.bind(this))};componentWillUnmount(){removeListener(this.r)};render(){const{langState,...o}=this.props;if(langState){throw SyntaxError()}return createElement(W,{langState:langState?langState:G(),...o})}}let h;try{h=require('hoist-non-react-statics')}catch(e){}if(typeof h==='function'){h(L,W)}L.displayName=`withLang(${d})`;return L};function getDisplayName(W){try{return W.displayName||W.name||'Unknown'}catch(e){return 'Unknown'}}function Localizable({keyword:k,children:c,paramArray:p=[],casing:s,transform:t,renderAs:r='span',allowEmpty:a,...o}){let h=!c&&k?k:c;if(h&&typeof h==='string'){h=localize({keyword:h,param:p,casing: s,transform: t})}else if(a){h=''}else{h=`_${k}_`}if(r==='value'){return h}else{return createElement(r,o,h)}}module.exports={withLang,useLang,Localizable}